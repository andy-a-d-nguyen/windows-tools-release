$ErrorActionPreference = "Stop";
trap { $host.SetShouldExit(1) }

# Function drawn from the non-original research published at;
# https://config9.com/windows/powershell/powershell-to-resolve-junction-target-path/
#
function Get_UncPath ($l_dir)
{
    if( ( ([System.Management.Automation.PSTypeName]'System.Win32').Type -eq $null)  -or ([system.win32].getmethod('GetSymbolicLinkTarget') -eq $null) )
    {
        Add-Type -MemberDefinition @"
private const int CREATION_DISPOSITION_OPEN_EXISTING = 3;
private const int FILE_FLAG_BACKUP_SEMANTICS = 0x02000000;

[DllImport("kernel32.dll", EntryPoint = "GetFinalPathNameByHandleW", CharSet = CharSet.Unicode, SetLastError = true)]
 public static extern int GetFinalPathNameByHandle(IntPtr handle, [In, Out] StringBuilder path, int bufLen, int flags);

[DllImport("kernel32.dll", EntryPoint = "CreateFileW", CharSet = CharSet.Unicode, SetLastError = true)]
 public static extern SafeFileHandle CreateFile(string lpFileName, int dwDesiredAccess, int dwShareMode,
 IntPtr SecurityAttributes, int dwCreationDisposition, int dwFlagsAndAttributes, IntPtr hTemplateFile);

 public static string GetSymbolicLinkTarget(System.IO.DirectoryInfo symlink)
 {
     SafeFileHandle directoryHandle = CreateFile(symlink.FullName, 0, 2, System.IntPtr.Zero, CREATION_DISPOSITION_OPEN_EXISTING, FILE_FLAG_BACKUP_SEMANTICS, System.IntPtr.Zero);
     if(directoryHandle.IsInvalid)
     {
         throw new Win32Exception(Marshal.GetLastWin32Error());
     }
     StringBuilder path = new StringBuilder(512);
     int size = GetFinalPathNameByHandle(directoryHandle.DangerousGetHandle(), path, path.Capacity, 0);
     if (size<0)
     {
         throw new Win32Exception(Marshal.GetLastWin32Error());
     }
     // The remarks section of GetFinalPathNameByHandle mentions the return being prefixed with "\\?\"
     // More information about "\\?\" here -> http://msdn.microsoft.com/en-us/library/aa365247(v=VS.85).aspx
     string sPath = path.ToString();
     if( sPath.Length>8 && sPath.Substring(0,8) == @"\\?\UNC\" )
     {
         return @"\" + sPath.Substring(7);
     }
     else if( sPath.Length>4 && sPath.Substring(0,4) == @"\\?\" )
     {
         return sPath.Substring(4);
     }
     else
     {
         return sPath;
     }
 }
"@ -Name Win32 -NameSpace System -UsingNamespace System.Text,Microsoft.Win32.SafeHandles,System.ComponentModel
    }
    [System.Win32]::GetSymbolicLinkTarget($l_dir)
}

$BOSH_INSTALL_TARGET = Resolve-Path $env:BOSH_INSTALL_TARGET
$filepath=(Get-ChildItem "msys2/msys2-*.tar.xz").FullName
$tarpath="C:\var\vcap\packages\git\usr\bin\tar.exe"

Start-Process -FilePath "$tarpath" -ArgumentList "-xJf $filepath -C $BOSH_INSTALL_TARGET" -Wait -NoNewWindow -PassThru

# Resolve-Path above will not unwind the symlinks and junctions
# pacman will forcibly replace these with actual directories,
# including destroying the c:\var\vcap\data -> d:\ directory symlink
# Instead, use our true working install path on either C:\ or D:\
#
$BOSH_INSTALL_TARGET = Get_UncPath $env:BOSH_INSTALL_TARGET
Set-Alias bash "$BOSH_INSTALL_TARGET\usr\bin\bash.exe"

# https://github.com/msys2/msys2/wiki/MSYS2-installation
Write-Host "Initialize using first bash.exe --login pass"
bash -lc exit

# Attempt 5 iterations of system update (until there are no more updates)
$ErrorActionPreference = 'Continue'
$i = 0
while (!$done) {
    Write-Host "`n================= SYSTEM UPDATE $((++$i)) =================`n"
    bash -lc 'pacman -Syuu --noconfirm | tee /update.log'
    $done = (Get-Content "$BOSH_INSTALL_TARGET\update.log") -match 'there is nothing to do' | Measure-Object | ForEach-Object { $_.Count -eq 2 }
    $done = $done -or ($i -ge 5)
}
Write-Host "`n================= ADDITIONAL PACKAGES =================`n"
bash -lc 'pacman -S --noconfirm --needed patch diffutils compression | tee /update.log'
Write-Host "`n================= CLEANUP PACKAGES ====================`n"
bash -lc 'pacman -Scc --noconfirm | tee /update.log'
Remove-Item "$BOSH_INSTALL_TARGET\update.log" -ea 0

Exit 0
