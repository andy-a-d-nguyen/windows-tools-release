$ErrorActionPreference = "Stop";
trap { $host.SetShouldExit(1) }

<% if_p("docker.tls.certificate") do %>
  $useTLS = $true
<% end.else do %>
  $useTLS = $false
<% end %>

<% if p("docker.use_persistent_disk_store") %>
  $dataRootBase = "c:\var\vcap\store"
<% else %>
  $dataRootBase = "c:\var\vcap\data"
<% end %>

# wait for dataRootBase to be ready. Required since persistent disks
#   are not yet supported by the bosh agent, and instead depend on 
#   the parallel setup-persistent-disk-store bosh job
while (!(Test-Path $dataRootBase)) {
  echo "Waiting for data root drive to be ready"
  Start-Sleep 5
}

if (!(Test-Path "$dataRootBase\docker")) {
  echo "Creating data-root"
  mkdir "$dataRootBase\docker"
}

$dockerDataDir = "$env:ProgramData\docker"

$dockerConfigDir = "$dockerDataDir\config"
if (!(Test-Path $dockerConfigDir)) {
  mkdir $dockerConfigDir
}

$dockerConfigPath = "$dockerConfigDir\daemon.json"

$dockerConfig = @{}

$dockerConfig."data-root" = "$dataRootBase\docker"

if ($useTLS) {
  $dockerConfig.tlsverify = $true
  $dockerConfig.tlscacert = "c:\var\vcap\jobs\docker\config\certs\ca.pem"
  $dockerConfig.tlscert = "c:\var\vcap\jobs\docker\config\certs\cert.pem"
  $dockerConfig.tlskey = "c:\var\vcap\jobs\docker\config\certs\key.pem"
  $dockerConfig.hosts = @("tcp://0.0.0.0:2376", "npipe://")

  New-NetFirewallRule -LocalPort 2376 -Protocol TCP -DisplayName dockerd
} else {
  $dockerConfig.hosts = @("npipe://")
}

ConvertTo-Json -InputObject $dockerConfig | Set-Content $dockerConfigPath -Encoding Ascii